{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KICS (pronounced as 'kick-s') or Kicscan is an open source solution for static code analysis of Infrastructure as Code. K eeping I nfrastructure as C ode S ecure (in short KICS ) is a must-have for any cloud native project. With KICS, finding security vulnerabilities, compliance issues, and infrastructure misconfigurations happens early in the development cycle, when fixing these is straightforward and cheap. It is as simple as running a CLI tool, making it easy to integrate into any project CI. Supported Platforms KICS scans and detects issues in following Infrastructure as Code solutions: More solutions, such as Docker, Ansible, AWS CloudFormation and others are on the roadmap . Getting Started Setting up and using KICS is super-easy. First, see how to install and get KICS running . Next, check how you can easily integrate it into your CI for any project. Eventually, explore the output results format and quickly fix the issues detected. How it Works What makes KICS really powerful and popular is its built-in extensibility. This extensibility is achieved by: Fully customizable and adjustable heuristics rules, called queries . These can be easily edited, extended, and added. Robust but yet simple architecture , which allows quick addition of support for new Infrastructure as Code solutions. Contribution KICS is a true community project. It's built as an open source from day one, and anyone can find his own way to contribute to the project. Check out how , within just minutes, you can start making a difference, by sharing your expertise with a community of thousands of security experts and software developers. How can I help?! Take me to the repo on GitHub! About the Project The KICS project is powered by Checkmarx , global leader of Application Security Testing. Read more about Infrastructure as Code , Infrastructure as Code Testing and Checkmarx. KICS will always stay an open source and free project for the benefit of global software industry community. We believe that when Software is Everywhere, Security is Everything . Now, Software = Security . Looking for more info? Explore KICS project in details: Roadmap Project plans Issues","title":"Home"},{"location":"#supported-platforms","text":"KICS scans and detects issues in following Infrastructure as Code solutions: More solutions, such as Docker, Ansible, AWS CloudFormation and others are on the roadmap .","title":"Supported Platforms"},{"location":"#getting-started","text":"Setting up and using KICS is super-easy. First, see how to install and get KICS running . Next, check how you can easily integrate it into your CI for any project. Eventually, explore the output results format and quickly fix the issues detected.","title":"Getting Started"},{"location":"#how-it-works","text":"What makes KICS really powerful and popular is its built-in extensibility. This extensibility is achieved by: Fully customizable and adjustable heuristics rules, called queries . These can be easily edited, extended, and added. Robust but yet simple architecture , which allows quick addition of support for new Infrastructure as Code solutions.","title":"How it Works"},{"location":"#contribution","text":"KICS is a true community project. It's built as an open source from day one, and anyone can find his own way to contribute to the project. Check out how , within just minutes, you can start making a difference, by sharing your expertise with a community of thousands of security experts and software developers. How can I help?! Take me to the repo on GitHub!","title":"Contribution"},{"location":"#about-the-project","text":"The KICS project is powered by Checkmarx , global leader of Application Security Testing. Read more about Infrastructure as Code , Infrastructure as Code Testing and Checkmarx. KICS will always stay an open source and free project for the benefit of global software industry community. We believe that when Software is Everywhere, Security is Everything . Now, Software = Security . Looking for more info? Explore KICS project in details: Roadmap Project plans Issues","title":"About the Project"},{"location":"CONTRIBUTING/","text":"Contribution We would like to THANK YOU for considering contributing to KICS! KICS is a true community project. It's built as an open source from day one, and anyone can find his own way to contribute to the project. Within just minutes, you can start making a difference, by sharing your expertise with a community of thousands of security experts and software developers. Contribution Options Good news! You don't have to contribute code. There are plenty of ways you can contribute to KICS project: Reporting new bugs or issues Help triaging issues Improving and translating the documentation Volunteering to maintain the project Code of Conduct By participating and contributing to the project, you agree to uphold our Code of Conduct . Get Started! Follow the instructions below to setup local KICS development environment and push your changes. Fork the kics repo on GitHub. Clone your fork locally: git clone https://github.com/Checkmarx/kics.git Create a branch for local development. Use succinct but descriptive name (prefix with feature/issue#-descriptive-name> or hotfix/issue#-descriptive-name ): git checkout -b <name-of-your-issue> Make your changes locally. Validate your changes to reassure they meet project quality and contribution standards: fancy local command goes here Commit your changes and push your branch to GitHub: git add . git commit git push --set-upstream origin <name-of-your-issue> Submit a pull request on GitHub website. How to Contribute Contributions are made to this repo via Issues and Pull Requests (PRs). A few general guidelines that cover both: Search for existing issues and pull requests before creating your own to avoid duplicates. PRs will only be accepted if associated with an issue (enhancement or bug) that has been submitted and reviewed/labeld as accepted . We will work hard to makes sure issues that are raised are handled in a timely manner. Issues Issues should be used to report problems with the solution / source code, request a new feature, or to discuss potential changes before a PR is created. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the information we need to investigate. If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help by indicating to our maintainers that a particular problem is affecting more than just the reporter. Pull Requests Pull Requests (PRs) are always welcome and can be a quick way to get your fix or improvement slated for the next release. In general, PRs should: Only fix/add the functionality in question or address code style issues, not both. Ensure all necessary details are provided and adhered to. Add unit or integration tests for fixed or changed functionality (if a test suite already exists) or specify steps taken to ensure changes were tested and functionality works as expected. Address a single concern in the least number of changed lines as possible. Include documentation in the repo or Provide additional comments in Markdown comments that should be pulled/reflected in GitHub Wiki for the given project. Be accompanied by a complete Pull Request template (loaded automatically when a PR is created). For changes that address core functionality or would require breaking changes (e.g. a major release), please open an Issue to discuss your proposal first. Pull Request Guidelines Before you submit a pull request, please reassure that it meets these guidelines: All validations and tests passed locally. The pull request includes tests. The relevant docs are updated, whether you're pushing new functionality or updating a query. Templates The following templates will be used when creating a new issue : Enhancement/Feature Request Template New (Approved) Feature Template Query Template Bug Report Template Resources How to Contribute to Open Source Using Pull Requests GitHub Help","title":"Contribution"},{"location":"CONTRIBUTING/#contribution","text":"We would like to THANK YOU for considering contributing to KICS! KICS is a true community project. It's built as an open source from day one, and anyone can find his own way to contribute to the project. Within just minutes, you can start making a difference, by sharing your expertise with a community of thousands of security experts and software developers.","title":"Contribution"},{"location":"CONTRIBUTING/#contribution-options","text":"Good news! You don't have to contribute code. There are plenty of ways you can contribute to KICS project: Reporting new bugs or issues Help triaging issues Improving and translating the documentation Volunteering to maintain the project","title":"Contribution Options"},{"location":"CONTRIBUTING/#code-of-conduct","text":"By participating and contributing to the project, you agree to uphold our Code of Conduct .","title":"Code of Conduct"},{"location":"CONTRIBUTING/#get-started","text":"Follow the instructions below to setup local KICS development environment and push your changes. Fork the kics repo on GitHub. Clone your fork locally: git clone https://github.com/Checkmarx/kics.git Create a branch for local development. Use succinct but descriptive name (prefix with feature/issue#-descriptive-name> or hotfix/issue#-descriptive-name ): git checkout -b <name-of-your-issue> Make your changes locally. Validate your changes to reassure they meet project quality and contribution standards: fancy local command goes here Commit your changes and push your branch to GitHub: git add . git commit git push --set-upstream origin <name-of-your-issue> Submit a pull request on GitHub website.","title":"Get Started!"},{"location":"CONTRIBUTING/#how-to-contribute","text":"Contributions are made to this repo via Issues and Pull Requests (PRs). A few general guidelines that cover both: Search for existing issues and pull requests before creating your own to avoid duplicates. PRs will only be accepted if associated with an issue (enhancement or bug) that has been submitted and reviewed/labeld as accepted . We will work hard to makes sure issues that are raised are handled in a timely manner.","title":"How to Contribute"},{"location":"CONTRIBUTING/#issues","text":"Issues should be used to report problems with the solution / source code, request a new feature, or to discuss potential changes before a PR is created. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the information we need to investigate. If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help by indicating to our maintainers that a particular problem is affecting more than just the reporter.","title":"Issues"},{"location":"CONTRIBUTING/#pull-requests","text":"Pull Requests (PRs) are always welcome and can be a quick way to get your fix or improvement slated for the next release. In general, PRs should: Only fix/add the functionality in question or address code style issues, not both. Ensure all necessary details are provided and adhered to. Add unit or integration tests for fixed or changed functionality (if a test suite already exists) or specify steps taken to ensure changes were tested and functionality works as expected. Address a single concern in the least number of changed lines as possible. Include documentation in the repo or Provide additional comments in Markdown comments that should be pulled/reflected in GitHub Wiki for the given project. Be accompanied by a complete Pull Request template (loaded automatically when a PR is created). For changes that address core functionality or would require breaking changes (e.g. a major release), please open an Issue to discuss your proposal first.","title":"Pull Requests"},{"location":"CONTRIBUTING/#pull-request-guidelines","text":"Before you submit a pull request, please reassure that it meets these guidelines: All validations and tests passed locally. The pull request includes tests. The relevant docs are updated, whether you're pushing new functionality or updating a query.","title":"Pull Request Guidelines"},{"location":"CONTRIBUTING/#templates","text":"The following templates will be used when creating a new issue : Enhancement/Feature Request Template New (Approved) Feature Template Query Template Bug Report Template","title":"Templates"},{"location":"CONTRIBUTING/#resources","text":"How to Contribute to Open Source Using Pull Requests GitHub Help","title":"Resources"},{"location":"about/","text":"About KICS Project About Checkmarx Checkmarx is the global leader in software security solutions for modern enterprise software development. Checkmarx delivers the industry\u2019s most comprehensive Software Security Platform that unifies with DevOps and provides static and interactive application security testing, software composition analysis and developer AppSec awareness and training programs to reduce and remediate risk from software vulnerabilities. Checkmarx is trusted by more than 40 percent of the Fortune 100 and half of the Fortune 50, including leading organizations such as SAP, Samsung and Salesforce.com. What is Infrastructure as Code Infrastructure as Code (IaC) is the creation, provisioning and configuration of software-defined compute (SDC), networkand storage infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. IaC automates the manual tasks usually associated with computing infrastructure configuration and implementation. By doing this, you can: Speed up configuration and implementation of new computing infrastructure Reduce the cost and resource needed to scale and manage large infrastructure Eliminate the inconsistencies that inevitably occur when multiple individuals manually configure new equipment or applications. The core concepts of Infrastructure as Code are: Defined in code Stored in a repository Declarative or Imperative Idempotence and Consistency Push or Pull Main Benefits of Infrastructure as Code: Fully automated deployment Consistent environments Repeatable process Reusable components (\"DRY\") Documented Architecture What is Infrastructure as Code Testing Infrastructure as Code testing examines configuration definitions and scripts used to instantiate infrastructure to ensure the resulting resources are secure. IaC security testing tools must be able to consume configuration files and scripts in relevant formats, apply tests to ensure conformance with common configuration hardening standards (i.e., Center for Internet Security Benchmarks and many others), identify security issues associated with specific operational environments, identify embedded secrets, and perform other tests supporting organization-specific standards and compliance requirements. Optionally, tools can automatically remediate errors (e.g., changing read/write permissions on storage resources). This capability specifically examines IaC testing in the context of the development process, however tools may also support examination of deployed production instances and responding to issues identified in those systems.","title":"About"},{"location":"about/#about-kics-project","text":"","title":"About KICS Project"},{"location":"about/#about-checkmarx","text":"Checkmarx is the global leader in software security solutions for modern enterprise software development. Checkmarx delivers the industry\u2019s most comprehensive Software Security Platform that unifies with DevOps and provides static and interactive application security testing, software composition analysis and developer AppSec awareness and training programs to reduce and remediate risk from software vulnerabilities. Checkmarx is trusted by more than 40 percent of the Fortune 100 and half of the Fortune 50, including leading organizations such as SAP, Samsung and Salesforce.com.","title":"About Checkmarx"},{"location":"about/#what-is-infrastructure-as-code","text":"Infrastructure as Code (IaC) is the creation, provisioning and configuration of software-defined compute (SDC), networkand storage infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. IaC automates the manual tasks usually associated with computing infrastructure configuration and implementation. By doing this, you can: Speed up configuration and implementation of new computing infrastructure Reduce the cost and resource needed to scale and manage large infrastructure Eliminate the inconsistencies that inevitably occur when multiple individuals manually configure new equipment or applications. The core concepts of Infrastructure as Code are: Defined in code Stored in a repository Declarative or Imperative Idempotence and Consistency Push or Pull Main Benefits of Infrastructure as Code: Fully automated deployment Consistent environments Repeatable process Reusable components (\"DRY\") Documented Architecture","title":"What is Infrastructure as Code"},{"location":"about/#what-is-infrastructure-as-code-testing","text":"Infrastructure as Code testing examines configuration definitions and scripts used to instantiate infrastructure to ensure the resulting resources are secure. IaC security testing tools must be able to consume configuration files and scripts in relevant formats, apply tests to ensure conformance with common configuration hardening standards (i.e., Center for Internet Security Benchmarks and many others), identify security issues associated with specific operational environments, identify embedded secrets, and perform other tests supporting organization-specific standards and compliance requirements. Optionally, tools can automatically remediate errors (e.g., changing read/write permissions on storage resources). This capability specifically examines IaC testing in the context of the development process, however tools may also support examination of deployed production instances and responding to issues identified in those systems.","title":"What is Infrastructure as Code Testing"},{"location":"architecture/","text":"Architecture KICS Architecture was built from the ground up with cloud-native mindset. It was designed for automation, handles state carefully and assumes that the only constant is change.","title":"Architecture"},{"location":"architecture/#architecture","text":"KICS Architecture was built from the ground up with cloud-native mindset. It was designed for automation, handles state carefully and assumes that the only constant is change.","title":"Architecture"},{"location":"code-of-conduct/","text":"Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Contributor Covenant Code of Conduct"},{"location":"code-of-conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code-of-conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"code-of-conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"code-of-conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"code-of-conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"code-of-conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"code-of-conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"getting-started/","text":"Installation There are multiple ways to get KICS up and running: Docker KICS is available as a Docker image and can be used as follows: docker pull checkmarx/kics:latest docker run -v {\u200b\u200b\u200b\u200bpath_to_local_folder_to_scan}\u200b\u200b\u200b\u200b:/path checkmarx/kics:latest -p \"/path\" -o \"/path/results.json\" You can provide your own path to the queries directory, otherwise the default directory will be used (default: ./assets/queries ) -q, --queries-path string path to directory with queries (default \"./assets/queries\" - built in the image) Binary KICS release process is pretty straightforward. When we're releasing a new version, we'll pack KICS executables for both Linux and Windows operating systems. Our security queries will be included in the ZIP files and tarballs, so that you can scan your IaC code with the out-of-the-box queries So all you need is: Go to KICS releases Download KICS binaries based on your OS Extract files Run kics executable with the cli options as described below (note that kics binary should be located in the same directory as queries directory) ./kics -p <path-of-your-project-to-scan> -o <output-results.json> Build from Sources Download and install Go from https://golang.org/dl/ Clone the repository: git clone https://github.com/Checkmarx/kics.git cd kics Kick a scan! go run ./cmd/console/main.go -p <path-of-your-project-to-scan> -o <output-results.json> CLI Options -h, --help help -o, --output-path string file path to store result in json format -p, --path string path to file or directory to scan -d, --payload-path string file path to store source internal representation in JSON format -q, --queries-path string path to directory with queries (default \"./assets/queries\") -v, --verbose verbose scan Next Steps Check how you can easily integrate it into your CI for any project. Explore the output results format and quickly fix the issues detected. Contribution Want to go the next mile and contribute? You're welcome!","title":"Getting Started"},{"location":"getting-started/#installation","text":"There are multiple ways to get KICS up and running:","title":"Installation"},{"location":"getting-started/#docker","text":"KICS is available as a Docker image and can be used as follows: docker pull checkmarx/kics:latest docker run -v {\u200b\u200b\u200b\u200bpath_to_local_folder_to_scan}\u200b\u200b\u200b\u200b:/path checkmarx/kics:latest -p \"/path\" -o \"/path/results.json\" You can provide your own path to the queries directory, otherwise the default directory will be used (default: ./assets/queries ) -q, --queries-path string path to directory with queries (default \"./assets/queries\" - built in the image)","title":"Docker"},{"location":"getting-started/#binary","text":"KICS release process is pretty straightforward. When we're releasing a new version, we'll pack KICS executables for both Linux and Windows operating systems. Our security queries will be included in the ZIP files and tarballs, so that you can scan your IaC code with the out-of-the-box queries So all you need is: Go to KICS releases Download KICS binaries based on your OS Extract files Run kics executable with the cli options as described below (note that kics binary should be located in the same directory as queries directory) ./kics -p <path-of-your-project-to-scan> -o <output-results.json>","title":"Binary"},{"location":"getting-started/#build-from-sources","text":"Download and install Go from https://golang.org/dl/ Clone the repository: git clone https://github.com/Checkmarx/kics.git cd kics Kick a scan! go run ./cmd/console/main.go -p <path-of-your-project-to-scan> -o <output-results.json>","title":"Build from Sources"},{"location":"getting-started/#cli-options","text":"-h, --help help -o, --output-path string file path to store result in json format -p, --path string path to file or directory to scan -d, --payload-path string file path to store source internal representation in JSON format -q, --queries-path string path to directory with queries (default \"./assets/queries\") -v, --verbose verbose scan","title":"CLI Options"},{"location":"getting-started/#next-steps","text":"Check how you can easily integrate it into your CI for any project. Explore the output results format and quickly fix the issues detected.","title":"Next Steps"},{"location":"getting-started/#contribution","text":"Want to go the next mile and contribute? You're welcome!","title":"Contribution"},{"location":"integrations/","text":"Integrations TBD","title":"Integrations"},{"location":"integrations/#integrations","text":"TBD","title":"Integrations"},{"location":"queries/","text":"Queries TBD","title":"Queries"},{"location":"queries/#queries","text":"TBD","title":"Queries"},{"location":"results/","text":"Results KICS results are output in clear and simple JSON format. Example: { \"files_scanned\": 4, \"files_failed_to_scan\": 1, \"queries_total\": 227, \"queries_failed_to_execute\": 0, \"queries\": [ { \"query_name\": \"Container Allow Privileg Escalation Is True\", \"query_id\": \"container_allow_privilege_escalation_is_true\", \"severity\": \"MEDIUM\", \"files\": [ { \"file_name\": \"assets/queries/terraform/kubernetes_pod/container_allow_privilege_escalation_is_true/test/positive.tf\", \"line\": 11, \"issue_type\": \"IncorrectValue\", \"search_key\": \"kubernetes_pod[test3].spec.container.allow_privilege_escalation\", \"expected_value\": \"Attribute 'allow_privilege_escalation' is undefined or false\", \"actual_value\": \"Attribute 'allow_privilege_escalation' is true\", \"value\": null } ] } ] }","title":"Results"},{"location":"results/#results","text":"KICS results are output in clear and simple JSON format. Example: { \"files_scanned\": 4, \"files_failed_to_scan\": 1, \"queries_total\": 227, \"queries_failed_to_execute\": 0, \"queries\": [ { \"query_name\": \"Container Allow Privileg Escalation Is True\", \"query_id\": \"container_allow_privilege_escalation_is_true\", \"severity\": \"MEDIUM\", \"files\": [ { \"file_name\": \"assets/queries/terraform/kubernetes_pod/container_allow_privilege_escalation_is_true/test/positive.tf\", \"line\": 11, \"issue_type\": \"IncorrectValue\", \"search_key\": \"kubernetes_pod[test3].spec.container.allow_privilege_escalation\", \"expected_value\": \"Attribute 'allow_privilege_escalation' is undefined or false\", \"actual_value\": \"Attribute 'allow_privilege_escalation' is true\", \"value\": null } ] } ] }","title":"Results"},{"location":"roadmap/","text":"Roadmap TBD","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"TBD","title":"Roadmap"}]}